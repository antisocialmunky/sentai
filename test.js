// Generated by CoffeeScript 1.3.1
(function() {
  var Entity, should;

  should = require('chai').should();

  Entity = require('./Entity');

  describe('Entity.Componentize', function() {
    it('should create a new Component class from a class', function() {
      var Clas, Component, component, entity;
      Component = Entity.Componentize(Component = (function() {

        Component.name = 'Component';

        function Component() {}

        return Component;

      })());
      Clas = Entity.Class(Component);
      entity = new Clas();
      component = entity._components[Component._id];
      return component.entity.should.equal(entity);
    });
    return it('should sync the entity with the component variables', function() {
      var Clas, Component, component, entity, position;
      Component = Entity.Componentize(Component = (function() {

        Component.name = 'Component';

        function Component() {}

        Component.prototype.position = {
          x: 1,
          y: 1
        };

        return Component;

      })(), {
        sync: 'position'
      });
      Clas = Entity.Class(Component);
      entity = new Clas();
      component = entity._components[Component._id];
      entity.position.should.equal(component.position);
      position = component.position = {
        x: 2,
        y: 2
      };
      entity.position.should.equal(position);
      return component.__position.should.equal(position);
    });
  });

  describe('Entity.Class', function() {
    it('should create a new componentless Entity which builds correctly', function() {
      var Clas, entity;
      Clas = Entity.Class([]);
      entity = new Clas();
      return entity.context.should.equal(entity);
    });
    it('should create a new Entity with a dummy component', function() {
      var Clas, Component, entity;
      Component = Entity.Componentize(Component = (function() {

        Component.name = 'Component';

        function Component() {}

        return Component;

      })());
      Clas = Entity.Class(Component);
      entity = new Clas();
      entity._components[Component._id].entity.should.equal(entity);
      return entity._components[Component._id].should.be["instanceof"](Component);
    });
    it('should correctly bind events defined using on', function() {
      var Clas, Component, entity, ticked;
      ticked = false;
      Component = Entity.Componentize(Component = (function() {

        Component.name = 'Component';

        function Component() {}

        Component.prototype.tick = function() {
          return ticked = true;
        };

        return Component;

      })(), {
        listenTo: 'tick'
      });
      Clas = Entity.Class(Component);
      entity = new Clas();
      Clas.prototype.tick.should.exist;
      entity.tick();
      return ticked.should.be["true"];
    });
    it('should be reactive to observed values', function() {
      var Clas, Component, aValue, bValue, entity, varChanges;
      varChanges = 0;
      aValue = 0;
      bValue = 0;
      Component = Entity.Componentize(Component = (function() {

        Component.name = 'Component';

        function Component() {}

        Component.prototype.change = function(a, b) {
          varChanges++;
          aValue = a;
          return bValue = b;
        };

        return Component;

      })(), {
        observes: {
          change: ['a', 'b']
        }
      });
      Clas = Entity.Class(Component);
      entity = new Clas();
      entity.a = 100;
      aValue.should.equal(100);
      entity.__a.should.equal(100);
      entity.a.should.equal(100);
      varChanges.should.equal(1);
      entity.b = 200;
      aValue.should.equal(100);
      bValue.should.equal(200);
      entity.__b.should.equal(200);
      entity.b.should.equal(200);
      return varChanges.should.equal(2);
    });
    return it('should be reactive to synced values', function() {
      var Clas, Component1, Component2, aValue, component2, entity, varChanges;
      varChanges = 0;
      aValue = 0;
      Component1 = Entity.Componentize(Component1 = (function() {

        Component1.name = 'Component1';

        function Component1() {}

        Component1.prototype.change = function(a) {
          aValue = a;
          return varChanges++;
        };

        return Component1;

      })(), {
        observes: {
          change: 'a'
        }
      });
      Component2 = Entity.Componentize(Component2 = (function() {

        Component2.name = 'Component2';

        function Component2() {}

        Component2.prototype.a = 100;

        return Component2;

      })(), {
        sync: 'a'
      });
      Clas = Entity.Class([Component1, Component2]);
      entity = new Clas();
      component2 = entity._components[Component2._id];
      aValue.should.equal(100);
      component2.__a.should.equal(100);
      component2.a.should.equal(100);
      entity.__a.should.equal(100);
      entity.a.should.equal(100);
      varChanges.should.equal(1);
      component2.a = 200;
      aValue.should.equal(200);
      component2.__a.should.equal(200);
      component2.a.should.equal(200);
      entity.__a.should.equal(200);
      entity.a.should.equal(200);
      return varChanges.should.equal(2);
    });
  });

}).call(this);
