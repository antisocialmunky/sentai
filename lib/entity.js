// Generated by CoffeeScript 1.7.1
var Class, ComponentId, Entity, Events, addListensTo, addObserves, addSyncs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require('coffee-script');

Events = (function() {
  Events.prototype.context = null;

  Events.prototype.events = null;

  function Events(options) {
    this.context = options.context;
    this.events = {};
  }

  Events.prototype.on = function(eventName, callback, ctx, constructor) {
    var eventCtxs;
    if (ctx == null) {
      ctx = this.context;
    }
    eventCtxs = this.events[eventName];
    if (eventCtxs) {
      eventCtxs.push({
        ctx: ctx || this.context,
        cb: callback
      });
    } else {
      this.events[eventName] = [
        {
          ctx: ctx || ctx,
          cb: callback
        }
      ];
    }
    if ((constructor != null) && (constructor.prototype[eventName] == null)) {
      return constructor.prototype[eventName] = function(payload) {
        return this.fire(eventName, payload);
      };
    }
  };

  Events.prototype.fire = function(eventName, payload) {
    var eventCtx, eventCtxs, _i, _len;
    eventCtxs = this.events[eventName];
    if (eventCtxs) {
      for (_i = 0, _len = eventCtxs.length; _i < _len; _i++) {
        eventCtx = eventCtxs[_i];
        if (eventCtx.cb.call(eventCtxs.ctx, payload) === false) {
          return false;
        }
      }
    }
    return true;
  };

  return Events;

})();

Entity = (function(_super) {
  __extends(Entity, _super);

  function Entity() {
    Entity.__super__.constructor.call(this, {
      context: this
    });
  }

  return Entity;

})(Events);

addSyncs = function(sync) {
  var config, prototype, v, _i, _len;
  if (sync != null) {
    prototype = this.prototype;
    sync = Array.prototype.slice.call(arguments);
    if (prototype._sync == null) {
      prototype._sync = sync;
    } else {
      prototype._sync = prototype._sync.concat(sync);
    }
    for (_i = 0, _len = sync.length; _i < _len; _i++) {
      v = sync[_i];
      config = function(__v) {
        prototype[__v] = prototype[v];
        return {
          get: function() {
            return this[__v];
          },
          set: function(val) {
            this[__v] = val;
            return this._entity[v] = val;
          }
        };
      };
      Object.defineProperty(prototype, v, config('__' + v));
    }
  }
  return this;
};

addListensTo = function(listensTo) {
  var prototype;
  if (listensTo) {
    prototype = this.prototype;
    listensTo = Array.prototype.slice.call(arguments);
    if (prototype._listensTo == null) {
      prototype._listensTo = listensTo;
    } else {
      prototype._listensTo = prototype._listensTo.concat(listensTo);
    }
  }
  return this;
};

addObserves = function(observes) {
  var key, prototype, val;
  if (observes) {
    prototype = this.prototype;
    if (prototype._observes == null) {
      prototype._observes = {};
    }
    for (key in observes) {
      val = observes[key];
      prototype._observes[key] = val;
    }
  }
  return this;
};

ComponentId = 0;

Entity.Componentize = function(component, name) {
  var NewComponent, id;
  id = name != null ? name : ComponentId++;
  NewComponent = (function(_super) {
    __extends(NewComponent, _super);

    NewComponent._id = id;

    NewComponent.prototype._id = id;

    NewComponent.prototype._sync = null;

    NewComponent.prototype._listensTo = null;

    NewComponent.prototype._observes = null;

    function NewComponent(entity, options) {
      this._entity = entity;
      NewComponent.__super__.constructor.call(this, options);
    }

    return NewComponent;

  })(component);
  NewComponent.sync = addSyncs;
  NewComponent.listensTo = addListensTo;
  NewComponent.observes = addObserves;
  return NewComponent;
};

Entity.Class = Class = function(components) {
  var NewClass, cb, component, config, func, getSet, getSets, id, observes, v, vars, _i, _j, _len, _len1;
  getSets = {};
  if (!(components instanceof Array)) {
    components = [components];
  }
  for (_i = 0, _len = components.length; _i < _len; _i++) {
    component = components[_i];
    if ((component != null) && (component.prototype != null)) {
      id = component._id;
      observes = component.prototype._observes;
      if (observes != null) {
        for (func in observes) {
          vars = observes[func];
          cb = component.prototype[func];
          if (cb != null) {
            if (!(vars instanceof Array)) {
              vars = [vars];
            }
            for (_j = 0, _len1 = vars.length; _j < _len1; _j++) {
              v = vars[_j];
              getSet = getSets[v];
              if (getSet == null) {
                getSets[v] = getSet = [];
              }
              getSet.push({
                ctx: id,
                cb: cb,
                vars: vars
              });
            }
          }
        }
      }
    }
  }
  NewClass = (function(_super) {
    __extends(NewClass, _super);

    NewClass.prototype._components = null;

    NewClass.prototype._options = null;

    function NewClass(options) {
      var componentId, componentInstance, event, eventName, events, sync, _k, _l, _len2, _len3, _len4, _len5, _m, _n, _options;
      NewClass.__super__.constructor.apply(this, arguments);
      if (options == null) {
        options = _options = {};
      }
      this._components = {};
      for (_k = 0, _len2 = components.length; _k < _len2; _k++) {
        component = components[_k];
        componentId = component._id;
        componentInstance = this._components[componentId] = new component(this, options[componentId] || options);
        events = component.prototype._listensTo;
        if (events != null) {
          if (!(events instanceof Array)) {
            events = [events];
          }
          for (_l = 0, _len3 = events.length; _l < _len3; _l++) {
            event = events[_l];
            if (event instanceof Object) {
              event = event.on;
              eventName = event["do"];
              if (typeof eventName === 'function') {
                cb = eventName;
              } else {
                cb = component.prototype[eventName];
              }
            } else {
              cb = component.prototype[event];
            }
            if (cb != null) {
              this.on(event, cb, componentInstance, NewClass);
            }
          }
        }
      }
      for (_m = 0, _len4 = components.length; _m < _len4; _m++) {
        component = components[_m];
        sync = component.prototype._sync;
        if (sync != null) {
          for (_n = 0, _len5 = sync.length; _n < _len5; _n++) {
            v = sync[_n];
            this[v] = component.prototype['__' + v];
          }
        }
      }
    }

    return NewClass;

  })(Entity);
  for (v in getSets) {
    getSet = getSets[v];
    config = function(__v) {
      return {
        get: function() {
          return this[__v];
        },
        set: function(val) {
          var arg, args, getSetConfig, _k, _l, _len2, _len3, _ref, _results;
          this[__v] = val;
          _results = [];
          for (_k = 0, _len2 = getSet.length; _k < _len2; _k++) {
            getSetConfig = getSet[_k];
            args = [];
            _ref = getSetConfig.vars;
            for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
              arg = _ref[_l];
              args.push(this[arg]);
            }
            _results.push(getSetConfig.cb.apply(this._components[getSetConfig.ctx], args));
          }
          return _results;
        }
      };
    };
    Object.defineProperty(NewClass.prototype, v, config('__' + v));
  }
  return NewClass;
};

module.exports = Entity;

//# sourceMappingURL=entity.map
