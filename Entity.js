// Generated by CoffeeScript 1.3.1
(function() {
  var Class, Entity, Events, componentId,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Events = (function() {

    Events.name = 'Events';

    Events.prototype.context = null;

    Events.prototype.events = null;

    function Events(options) {
      this.context = options.context;
      this.events = {};
    }

    Events.prototype.on = function(eventName, callback, ctx, constructor) {
      var eventCtxs;
      if (!(ctx != null)) {
        ctx = this.context;
      }
      eventCtxs = this.events[eventName];
      if (eventCtxs) {
        eventCtxs.push({
          ctx: ctx || this.context,
          cb: callback
        });
      } else {
        this.events[eventName] = [
          {
            ctx: ctx || ctx,
            cb: callback
          }
        ];
      }
      if ((constructor != null) && !(constructor.prototype[eventName] != null)) {
        return constructor.prototype[eventName] = function(payload) {
          return this.fire(eventName, payload);
        };
      }
    };

    Events.prototype.fire = function(eventName, payload) {
      var eventCtx, eventCtxs, _i, _len;
      eventCtxs = this.events[eventName];
      if (eventCtxs) {
        for (_i = 0, _len = eventCtxs.length; _i < _len; _i++) {
          eventCtx = eventCtxs[_i];
          if (eventCtx.cb.call(eventCtxs.ctx, payload) === false) {
            return false;
          }
        }
      }
      return true;
    };

    return Events;

  })();

  Entity = (function(_super) {

    __extends(Entity, _super);

    Entity.name = 'Entity';

    function Entity() {
      Entity.__super__.constructor.call(this, {
        context: this
      });
    }

    return Entity;

  })(Events);

  Entity.Component = (function() {
    var entity;

    Component.name = 'Component';

    entity = null;

    function Component(entity, options) {
      this.entity = entity;
      this.initialize(options);
    }

    Component.prototype.initialize = function(options) {};

    return Component;

  })();

  componentId = 0;

  Entity.Class = Class = function(components) {
    var NewClass, cb, component, config, func, getSet, getSets, id, obs, v, vars, _i, _j, _len, _len1;
    getSets = {};
    for (_i = 0, _len = components.length; _i < _len; _i++) {
      component = components[_i];
      if ((component != null) && (component.prototype != null)) {
        id = component.name;
        obs = component.prototype.obs;
        if (obs != null) {
          for (func in obs) {
            vars = obs[func];
            cb = component.prototype[func];
            if (cb != null) {
              for (_j = 0, _len1 = vars.length; _j < _len1; _j++) {
                v = vars[_j];
                getSet = getSets[v];
                if (!(getSet != null)) {
                  getSets[v] = getSet = [];
                }
                getSet.push({
                  ctx: id,
                  cb: cb
                });
              }
            }
          }
        }
      }
    }
    NewClass = (function(_super) {

      __extends(NewClass, _super);

      NewClass.name = 'NewClass';

      NewClass.prototype._components = null;

      function NewClass(options) {
        var component, componentInstance, event, events, _k, _l, _len2, _len3;
        NewClass.__super__.constructor.apply(this, arguments);
        if (!(options != null)) {
          options = {};
        }
        this._components = {};
        for (_k = 0, _len2 = components.length; _k < _len2; _k++) {
          component = components[_k];
          componentId = component.name;
          componentInstance = this._components[componentId] = new component(this, options[componentId] || options);
          events = component.prototype.on;
          if (events != null) {
            for (_l = 0, _len3 = events.length; _l < _len3; _l++) {
              event = events[_l];
              cb = component.prototype[event];
              if (cb != null) {
                this.on(event, cb, componentInstance, NewClass);
              }
            }
          }
        }
      }

      return NewClass;

    })(Entity);
    for (v in getSets) {
      getSet = getSets[v];
      config = function(__v) {
        return {
          get: function() {
            return this[__v];
          },
          set: function(val) {
            var getSetConfig, _k, _len2, _results;
            this[__v] = val;
            _results = [];
            for (_k = 0, _len2 = getSet.length; _k < _len2; _k++) {
              getSetConfig = getSet[_k];
              _results.push(getSetConfig.cb.call(this._components[getSetConfig.ctx]));
            }
            return _results;
          }
        };
      };
      Object.defineProperty(NewClass.prototype, v, config('__' + v));
    }
    return NewClass;
  };

  module.exports = Entity;

}).call(this);
